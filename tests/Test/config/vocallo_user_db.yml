configuration:
    connection:
        host: 127.0.0.1
        database_name: 'vocallo'
        user: 'root'
        password: 'root'

    simple:
        select:
            generic_injectable_sql:
                sql: "injectable sql"

            # languages
            find_language:
                sql: "SELECT language FROM languages WHERE language = :language"
                parameters: [language]
            find_all_languages:
                sql: "SELECT * FROM languages"

            # category
            find_category:
                sql: "SELECT category FROM categories WHERE category = :category AND language_id = :language_id"
                parameters: [category, language_id]
            find_all_categories:
                sql: "SELECT id, category FROM categories WHERE language_id = :language_id"
                parameters: [language_id]
            find_category_by_word:
                sql: "SELECT s.category FROM categories AS s INNER JOIN word_category AS ws WHERE s.id = ws.category_id AND ws.word_id = :word_id"
                parameters: [word_id]

            # words
            find_single_word_translation:
                sql: "SELECT w.id, w.word, w.type FROM words AS w WHERE language_id = :language_id AND word = :search_word ORDER BY id ASC LIMIT 12 OFFSET :offset"
                parameters: [language_id, search_word, offset]
            find_word_by_pattern:
                sql: "SELECT w.id, w.word, w.type FROM words AS w WHERE language_id = :language_id AND word LIKE :search_word ORDER BY w.id ASC LIMIT 12 OFFSET :offset"
                parameters: [language_id, search_word, offset]
            find_translations_by_word:
                sql: "SELECT translation FROM translations WHERE word_id = :word_id"
                parameters: [word_id]
            find_last_words:
                sql: "SELECT id, language_id, type, word FROM words AS w WHERE language_id = :language_id AND schedule_removal = 0 ORDER BY word LIMIT 12 OFFSET :offset"
                parameters: [language_id, offset]
            find_translation_by_word:
                sql: "SELECT * FROM translations WHERE word_id = :word_id"
                parameters: [word_id]
            find_translations_by_word_id:
                sql: "This sql is injected"
            find_word_by_word:
                sql: "SELECT * FROM words WHERE word = :word"
                parameters: [word]
            find_word_by_id:
                sql: "SELECT * FROM words WHERE id = :word_id"
                parameters: [word_id]
                model:
                    object: AppBundle\Entity\Word

            #images
            find_image_by_word:
                sql: "SELECT * FROM word_images WHERE word_id = :word_id"
                parameters: [word_id]


            #course
            find_course_by_name:
                sql: "SELECT * FROM courses WHERE name = :name"
                parameters: [name]
            find_course_by_id:
                sql: "SELECT * FROM courses WHERE id = :course_id"
                parameters: [course_id]
            find_all_courses_by_language:
                sql: "SELECT id, name FROM courses WHERE language_id = :language_id"
                parameters: [language_id]
            initial_course_info:
                sql: "SELECT * FROM courses WHERE id = :id"
                parameters: [id]

            #class
            find_class_by_name:
                sql: "SELECT * FROM classes WHERE course_id = :course_id AND name = :name"
                parameters: [course_id, name]
            find_classes_by_course:
                sql: "SELECT * FROM classes WHERE course_id = :course_id"
                parameters: [course_id]
            find_class_by_id:
                sql: "SELECT * FROM classes WHERE id = :class_id"
                parameters: [class_id]

            #lesson
            find_lesson:
                sql: "SELECT * FROM lessons WHERE class_id = :class_id AND name = :name"
                parameters: [class_id, name]
            find_all_lessons_by_class:
                sql: "SELECT * FROM lessons WHERE class_id = :class_id"
                parameters: [class_id]
            find_lesson_by_id:
                sql: "SELECT * FROM lessons WHERE id = :lesson_id"
                parameters: [lesson_id]
            find_lesson_complete:
                sql: "SELECT * FROM lessons WHERE id = :lesson_id AND name = :name AND class_id = :class_id"
                parameters: [lesson_id, name, class_id]

            #image
            find_word_image_by_filename:
                sql: "SELECT id FROM word_images WHERE file_name = :file_name"
                parameters: [file_name]

            #theory
            find_theory_by_name:
                sql: "SELECT id FROM theories WHERE name = :name AND lesson_id = :lesson_id"
                parameters: [name, lesson_id]
                model:
                    object: AppBundle\Entity\Theory
            find_all_theories_by_lesson:
                sql: "SELECT * FROM theories WHERE lesson_id = :lesson_id"
                parameters: [lesson_id]
            find_by_theory_id:
                sql: "SELECT * FROM theories WHERE id = :theory_id"
                parameters: [theory_id]
            find_decks_by_theory:
                sql: "SELECT id, internal_name FROM theory_decks WHERE theory_id = :theory_id"
                parameters: [theory_id]
            find_deck_by_internal_name:
                sql: "SELECT * FROM theory_decks WHERE theory_id = :theory_id AND internal_name = :internal_name"
                parameters: [theory_id, internal_name]
                model:
                    object: AppBundle\Entity\TheoryDeck
            find_deck_by_id:
                sql: "SELECT * FROM theory_decks WHERE id = :deck_id"
                parameters: [deck_id]

            #sound
            find_sound_by_filename:
                sql: "SELECT * FROM sounds WHERE file_name = :file_name"
                parameters: [file_name]

        insert:
            generic_insert:
                sql: 'some insert'


            create_language:
                sql: "INSERT INTO languages (language) VALUES (:language)"
                parameters: [language]

            create_category:
                sql: "INSERT INTO categories (category, language_id) VALUES (:category, :language_id)"
                parameters: [category, language_id]

            create_sentence:
                sql: "INSERT INTO sentence (user_id, language_id, sentence, translation) VALUES (:user_id, :language_id, :sentence, :translation)"
                parameters: [user_id, language_id, sentence, translation]

            create_class:
                sql: "INSERT INTO classes (course_id, name) VALUES (:course_id, :name)"
                parameters: [course_id, name]

            create_lesson:
                sql: "INSERT INTO lessons (class_id, name) VALUES (:class_id, :name)"
                parameters: [class_id, name]

            create_theory:
                sql: "INSERT INTO theories (name, lesson_id) VALUE (:name, :lesson_id)"
                parameters: [name, lesson_id]

            create_theory_deck:
                sql: "INSERT INTO theory_decks (theory_id, internal_name, deck_data, internal_description, show_on_page, ordering) VALUES (:theory_id, :internal_name, :deck_data, :internal_description, :show_on_page, :ordering)"
                parameters: [theory_id, internal_name, deck_data, internal_description, show_on_page, ordering]

            create_sound:
                sql: "INSERT INTO sounds (relative_path, absolute_path, file_name, absolute_full_path, relative_full_path) VALUES (:relative_path, :absolute_path, :file_name, :absolute_full_path, :relative_full_path)"
                parameters: [relative_path, absolute_path, file_name, absolute_full_path, relative_full_path]

            create_deck_sound:
                sql: "INSERT INTO theory_sounds (sound_id, theory_id, deck_id) VALUES (:sound_id, :theory_id, :deck_id)"
                parameters: [sound_id, theory_id, deck_id]

        update:
            update_working_language:
                sql: "UPDATE languages SET working_language = :working_language AND id = :language_id"
                parameters: [working_language, language_id]
            remove_working_language:
                sql: "UPDATE languages SET working_language = 0 WHERE working_language = 1"
            schedule_word_removal:
                sql: "UPDATE words SET schedule_removal = 1 WHERE id = :word_id"
                parameters: [word_id]
            rename_class:
                sql: "UPDATE classes SET name = :name WHERE id = :class_id"
                parameters: [class_id, name]
            rename_lesson:
                sql: "UPDATE lessons SET name = :name WHERE id = :lesson_id"
                parameters: [lesson_id, name]
            rename_theory:
                sql: "UPDATE theories SET name = :name WHERE id = :theory_id"
                parameters: [name, theory_id]
            update_theory_deck:
                sql: "UPDATE theory_decks SET internal_name = :internal_name, deck_data = :deck_data, internal_description = :internal_description, show_on_page = :show_on_page, ordering = :ordering WHERE id = :deck_id"
                parameters: [deck_id, internal_name, deck_data, internal_description, show_on_page, ordering]

    scenario:
        database:
            atomic: true
            rules: { return_entity: false }
            return_entity: []
            statements:
#                drop_database:
#                    sql: "DROP DATABASE IF NOT EXISTS vocallo"
#                    sql_type: database
                create_database:
                    sql: "CREATE DATABASE IF NOT EXISTS vocallo CHARACTER SET = 'utf8' COLLATE = 'utf8_general_ci'"
                use_database:
                    sql: "USE vocallo"

        create_course:
            atomic: true
            rules: { return_entity: false}
            return_entity: []
            statements:
                create_course:
                    sql: "INSERT INTO courses (language_id, name) VALUES (:language_id, :name)"
                    parameters: [name]
                    use:
                        statement_name: get_working_language_id
                        values: { get_working_language.id : language_id }
                get_working_language_id:
                    sql: "SELECT id FROM languages WHERE working_language = 1"

        insert_word:
            atomic: true
            rules: { return_entity: false }
            return_entity: []
            statements:
                insert_word:
                    sql: "INSERT INTO words (language_id, word, type) VALUES (:language_id, :word, :type)"
                    parameters: [language_id, word, type]
                insert_translation:
                    sql: "INSERT INTO translations (word_id, translation) VALUES(:word_id, :translation)"
                    parameters: [translation]
                    foreign_key:
                        statement_name: insert_word
                        bind_to: word_id
                insert_word_category:
                    sql: "INSERT INTO word_category (word_id, category_id) VALUES (:word_id, :category_id)"
                    parameters: [category_id]
                    foreign_key:
                        statement_name: insert_word
                        bind_to: word_id
                insert_word_image:
                    sql: "INSERT INTO word_images (word_id, relative_path, absolute_path, file_name, absolute_full_path, relative_full_path) VALUES (:word_id, :relative_path, :absolute_path, :file_name, :absolute_full_path, :relative_full_path)"
                    parameters: [:relative_path, :absolute_path, :file_name, :absolute_full_path, :relative_full_path]
                    foreign_key:
                        statement_name: insert_word
                        bind_to: word_id
        remove_word:
            atomic: true
            rules: { return_entity: false }
            return_entity: []
            statements:
                remove_translations:
                    sql: "DELETE t FROM translations AS t INNER JOIN words AS w WHERE t.word_id = :word_id AND t.word_id = w.id AND w.schedule_removal = 1"
                    parameters: [word_id]
                remove_word_category:
                    sql: "DELETE wc FROM word_category AS wc INNER JOIN words AS w WHERE wc.word_id = :word_id AND w.id = wc.word_id AND w.schedule_removal = 1"
                    can_be_empty_result: true
                    parameters: [word_id]
                remove_word_image:
                    sql: "DELETE wi FROM word_images AS wi INNER JOIN words AS w WHERE wi.word_id = :word_id AND w.id = wi.word_id AND w.schedule_removal = 1"
                    can_be_empty_result: true
                    parameters: [word_id]
                remove_word:
                    sql: "DELETE FROM words WHERE id = :word_id AND schedule_removal = 1"
                    parameters: [word_id]
        create_theory_deck:
            atomic: true
            rules: { return_entity: false }
            return_entity: []
            statements:
                create_sound:
                    sql: "INSERT INTO sounds (relative_path, absolute_path, file_name, absolute_full_path, relative_full_path) VALUES (:relative_path, :absolute_path, :file_name, :absolute_full_path, :relative_full_path)"
                    parameters: [relative_path, absolute_path, file_name, absolute_full_path, relative_full_path]
                create_theory_deck:
                    sql: "INSERT INTO theory_decks (theory_id, internal_name, deck_data, internal_description, show_on_page, ordering) VALUES (:theory_id, :internal_name, :deck_data, :internal_description, :show_on_page, :ordering)"
                    parameters: [theory_id, internal_name, deck_data, internal_description, show_on_page, ordering]
                create_deck_sound:
                    sql: "INSERT INTO theory_sounds (sound_id, theory_id, deck_id) VALUES (:sound_id, :theory_id, :deck_id)"
                    if_exists: create_sound
                    foreign_key:
                        statement_name: create_sound
                        bind_to: sound_id
                    use:
                        statement_name: select_inserted_deck
                        values: {select_inserted_deck.id: deck_id, select_inserted_deck.theory_id: theory_id }
                select_inserted_deck:
                    sql: "SELECT id, theory_id FROM theory_decks WHERE id = :deck_id"
                    foreign_key:
                        statement_name: create_theory_deck
                        bind_to: deck_id

        update_theory_deck:
            atomic: true
            return_entity: ['select_deck.id as deck_id', 'select_sounds.absolute_full_path as files_to_delete']
            statements:
                select_sounds:
                    sql: "SELECT s.absolute_full_path FROM sounds AS s INNER JOIN theory_sounds AS ts ON s.id = ts.sound_id AND ts.deck_id = :deck_id"
                    parameters: [deck_id]
                remove_deck_sounds:
                    sql: "DELETE s.* FROM sounds AS s INNER JOIN theory_sounds AS ts ON s.id = ts.sound_id AND ts.deck_id = :deck_id"
                    parameters: [deck_id]
                remove_theory_sounds:
                    sql: "DELETE FROM theory_sounds WHERE deck_id = :deck_id"
                    parameters: [deck_id]
                update_theory_deck:
                    sql: "UPDATE theory_decks SET internal_name = :internal_name, deck_data = :deck_data, internal_description = :internal_description, show_on_page = :show_on_page, ordering = :ordering WHERE id = :deck_id"
                    parameters: [deck_id, internal_name, deck_data, internal_description, show_on_page, ordering]
                    can_be_empty_result: true
                create_sounds:
                    sql: "INSERT INTO sounds (relative_path, absolute_path, file_name, absolute_full_path, relative_full_path, client_original_name) VALUES (:relative_path, :absolute_path, :file_name, :absolute_full_path, :relative_full_path, :client_original_name)"
                    parameters: [relative_path, absolute_path, file_name, absolute_full_path, relative_full_path, client_original_name]
                create_deck_sound:
                    sql: "INSERT INTO theory_sounds (sound_id, theory_id, deck_id) VALUES (:sound_id, :theory_id, :deck_id)"
                    if_exists: create_sounds
                    foreign_key:
                        statement_name: create_sound
                        bind_to: sound_id
                    use:
                        statement_name: select_deck
                        values: {select_deck.id: deck_id, select_deck.theory_id: theory_id }
                select_deck:
                    sql: "SELECT id, theory_id FROM theory_decks WHERE id = :deck_id"
                    parameters: [deck_id]

        seed:
            atomic: true
            rules: { return_entity: false }
            return_entity: []
            statements:
                create_languages_table:
                    sql: "CREATE TABLE languages (id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, working_language TINYINT DEFAULT 0, language VARCHAR(256) NOT NULL) CHARACTER SET utf8 COLLATE utf8_general_ci"
                create_word_table:
                    sql: "CREATE TABLE words (id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY, language_id INT(6) NOT NULL, image_id INT(6) DEFAULT NULL, word VARCHAR(256) NOT NULL, type VARCHAR(256) DEFAULT NULL, schedule_removal TINYINT DEFAULT 0) CHARACTER SET utf8 COLLATE utf8_general_ci"
                create_translations_table:
                    sql: "CREATE TABLE translations (id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY, word_id INT(6) NOT NULL, translation VARCHAR(256) NOT NULL) CHARACTER SET utf8 COLLATE utf8_general_ci"
                create_category_table:
                    sql: "CREATE TABLE categories (id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, language_id INT(6) NOT NULL, category VARCHAR(256) NOT NULL) CHARACTER SET utf8 COLLATE utf8_general_ci"
                create_word_category_table:
                    sql: "CREATE TABLE word_category (id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, word_id INT(6) NOT NULL, category_id INT(6) NOT NULL) CHARACTER SET utf8 COLLATE utf8_general_ci"
                create_course_table:
                    sql: "CREATE TABLE courses (id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, language_id INT(6) NOT NULL, name VARCHAR(255) NOT NULL) CHARACTER SET utf8 COLLATE utf8_general_ci"
                create_class_table:
                    sql: "CREATE TABLE classes (id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, course_id INT(6) NOT NULL, name VARCHAR(255) NOT NULL) CHARACTER SET utf8 COLLATE utf8_general_ci"
                create_lesson_table:
                    sql: "CREATE TABLE lessons (id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, class_id INT(6) NOT NULL, name VARCHAR(255) NOT NULL) CHARACTER SET utf8 COLLATE utf8_general_ci"
                create_images_table:
                    sql: "CREATE TABLE word_images (id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, word_id INT(6) NOT NULL, relative_path VARCHAR(255) DEFAULT NULL, absolute_path VARCHAR(255) DEFAULT NULL, file_name VARCHAR(255) DEFAULT NULL, absolute_full_path VARCHAR(255) DEFAULT NULL, relative_full_path VARCHAR(255) DEFAULT NULL) CHARACTER SET utf8 COLLATE utf8_general_ci"
                create_theory_table:
                    sql: "CREATE TABLE theories (id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, lesson_id INT(6) NOT NULL, name VARCHAR(255) NOT NULL) CHARACTER SET utf8 COLLATE utf8_general_ci"
                create_theory_deck:
                    sql: "CREATE TABLE theory_decks (id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, theory_id INT(6) NOT NULL, internal_name VARCHAR(255) NOT NULL, internal_description TEXT DEFAULT NULL, deck_data TEXT DEFAULT NULL, show_on_page TINYINT DEFAULT 0, ordering INT(6) DEFAULT NULL) CHARACTER SET utf8 COLLATE utf8_general_ci"
                create_sounds_table:
                    sql: "CREATE TABLE sounds (id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, relative_path VARCHAR(255) NOT NULL, absolute_path VARCHAR(255) NOT NULL, file_name VARCHAR(255) NOT NULL, absolute_full_path VARCHAR(255) NOT NULL, relative_full_path VARCHAR(255) NOT NULL) CHARACTER SET utf8 COLLATE utf8_general_ci"
                create_theory_sounds_table:
                    sql: "CREATE TABLE theory_sounds (id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, sound_id INT(6) NOT NULL, theory_id INT(6) NOT NULL, deck_id INT(6) NOT NULL) CHARACTER SET utf8 COLLATE utf8_general_ci"

    callable:
        last_words:
            type: object
            name: AppBundle\BlueDotCallable\LastWordsCallable
        search_callable:
            type: object
            name: AppBundle\BlueDotCallable\SearchCallable
        create_deck_callable:
            type: object
            name: AppBundle\BlueDotCallable\CreateDeckCallable