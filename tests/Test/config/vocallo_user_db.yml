configuration:
    connection:
        host: 127.0.0.1
        database_name: 'vocallo'
        user: 'root'
        password: 'root'

    simple:
        select:
            find_user_by_username:
                sql: "SELECT * FROM users WHERE username = :username"
                parameters: [username]
            find_language_by_user:
                sql: "SELECT language FROM languages WHERE user_id = :user_id AND language = :language"
                parameters: [user_id, language]
            find_category_by_user:
                sql: "SELECT category FROM categories WHERE user_id = :user_id AND category = :category AND language_id = :language_id"
                parameters: [user_id, category, language_id]
            find_all_languages:
                sql: "SELECT * FROM languages WHERE user_id = :user_id"
                parameters: [user_id]
            find_all_categories:
                sql: "SELECT * FROM categories WHERE user_id = :user_id AND language_id = :language_id"
                parameters: [user_id, language_id]

            find_single_word_translation:
                sql: "SELECT w.id, w.word, w.type FROM words AS w WHERE language_id = :language_id AND user_id = :user_id AND word = :search_word ORDER BY id ASC LIMIT 12"
                parameters: [language_id, user_id, search_word]
            find_word_by_pattern:
                sql: "SELECT w.id, w.word, w.type FROM words AS w WHERE language_id = :language_id AND user_id = :user_id AND word LIKE :search_word ORDER BY w.id ASC LIMIT 12"
                parameters: [language_id, user_id, search_word]
            find_translations_by_word:
                sql: "SELECT translation FROM translations WHERE word_id = :word_id"
                parameters: [word_id]

            find_last_words:
                sql: "SELECT id, language_id, type, word FROM words AS w WHERE language_id = :language_id AND user_id = :user_id ORDER BY id DESC LIMIT 12 OFFSET :offset"
                parameters: [language_id, user_id, offset]
            find_category_by_word:
                sql: "SELECT s.category FROM categories AS s INNER JOIN word_category AS ws WHERE s.id = ws.category_id AND ws.word_id = :word_id"
                parameters: [word_id]

        insert:
            create_language:
                sql: "INSERT INTO languages (language, user_id) VALUES (:language, :user_id)"
                parameters: [language, user_id]
            create_category:
                sql: "INSERT INTO categories (category, user_id, language_id) VALUES (:category, :user_id, :language_id)"
                parameters: [category, user_id, language_id]
            create_sentence:
                sql: "INSERT INTO sentence (user_id, language_id, sentence, translation) VALUES (:user_id, :language_id, :sentence, :translation)"
                parameters: [user_id, language_id, sentence, translation]

        update:
            update_working_language:
                sql: "UPDATE languages SET working_language = :working_language WHERE user_id = :user_id AND id = :language_id"
                parameters: [working_language, user_id, language_id]
            remove_working_language:
                sql: "UPDATE languages SET working_language = 0 WHERE user_id = :user_id AND working_language = 1"
                parameters: [user_id]

    scenario:
        database:
            atomic: true
            rules: { return_entity: false }
            return_entity: []
            statements:
                drop_database:
                    sql: "DROP DATABASE IF EXISTS vocallo"
                    sql_type: database
                create_database:
                    sql: "CREATE DATABASE IF NOT EXISTS vocallo CHARACTER SET = 'utf8' COLLATE = 'utf8_general_ci'"
                    sql_type: database
                use_database:
                    sql: "USE vocallo"
                    sql_type: database

        insert_word:
            atomic: true
            rules: { return_entity: false }
            return_entity: []
            statements:
                insert_word:
                    sql: "INSERT INTO words (user_id, language_id, word, type) VALUES (:user_id, :language_id, :word, :type)"
                    sql_type: insert
                    parameters: [user_id, language_id, word, type]
                insert_translation:
                    sql: "INSERT INTO translations (word_id, translation) VALUES(:word_id, :translation)"
                    sql_type: insert
                    parameters: [translation]
                    foreign_key:
                        statement_name: insert_word
                        bind_to: word_id
                insert_word_category:
                    sql: "INSERT INTO word_category (user_id, word_id, category_id) VALUES (:user_id, :word_id, :category_id)"
                    sql_type: insert
                    parameters: [user_id, category_id]
                    foreign_key:
                        statement_name: insert_word
                        bind_to: word_id
        remove_word:
            atomic: true
            rules: { return_entity: false }
            return_entity: []
            statements:
                remove_translations:
                    sql: "DELETE FROM translations WHERE word_id = :word_id"
                    sql_type: delete
                    parameters: [word_id]
                remove_word_category:
                    sql: "DELETE FROM word_category WHERE word_id = :word_id AND user_id = :user_id"
                    can_be_empty_result: true
                    sql_type: delete
                    parameters: [word_id, user_id]
                remove_word:
                    sql: "DELETE FROM words WHERE id = :word_id AND user_id = :user_id"
                    sql_type: delete
                    parameters: [word_id, user_id]

        seed:
            atomic: true
            rules: { return_entity: false }
            return_entity: []
            statements:
                create_languages_table:
                    sql: "CREATE TABLE languages (id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, user_id INT(6), working_language TINYINT DEFAULT 0, language VARCHAR(256) NOT NULL)"
                    sql_type: table
                create_word_table:
                    sql: "CREATE TABLE words (id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY, user_id INT(6) NOT NULL, language_id INT(6) NOT NULL, word VARCHAR(256) NOT NULL, type VARCHAR(256) DEFAULT NULL)"
                    sql_type: table
                create_translations_table:
                    sql: "CREATE TABLE translations (id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY, word_id INT(6) NOT NULL, translation VARCHAR(256) NOT NULL)"
                    sql_type: table
                create_category_table:
                    sql: "CREATE TABLE categories (id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, user_id INT(6) UNSIGNED NOT NULL, language_id INT(6) NOT NULL, category VARCHAR(256) NOT NULL)"
                    sql_type: table
                create_word_category_table:
                    sql: "CREATE TABLE word_category (id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, user_id INT(6) NOT NULL, word_id INT(6) NOT NULL, category_id INT(6) NOT NULL)"
                    sql_type: table
                create_sentence_table:
                    sql: "CREATE TABLE sentence (id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, user_id INT(6) NOT NULL, language_id INT(6) NOT NULL, sentence TEXT NOT NULL, translation TEXT NOT NULL)"
                    sql_type: table

    callable:
        last_words:
            type: object
            name: AppBundle\BlueDotCallable\LastWordsCallable
        search_callable:
            type: object
            name: AppBundle\BlueDotCallable\SearchCallable