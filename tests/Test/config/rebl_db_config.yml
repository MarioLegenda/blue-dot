
configuration:
    connection:
        host: 127.0.0.1
        database_name: 'rebl'
        user: 'root'
        password: 'root'

    simple:
        select:
            find_user_by_username:
                sql: "SELECT * FROM users WHERE username = :username"
                parameters: [username]
            find_roles_by_user:
                sql: "SELECT * FROM roles WHERE user_id = :user_id"
                parameters: [user_id]
            find_users:
                sql: "SELECT * FROM users WHERE id = :id"
                parameters: [id]
        insert:
            insert_account:
                sql: "INSERT INTO account (type) VALUES (:type)"
                parameters: [type]
            insert_user:
                sql: "INSERT INTO users (username, password, account_id) VALUES (:username, :password, :account_id)"
                parameters: [username, password, account_id]
            insert_account:
                sql: "INSERT INTO account (type) VALUES (:type)"
                parameters: [type]
        update:
            update_user:
                sql: "UPDATE users SET username = :username WHERE id = :id"
                parameters: [username, id]
        delete:
            delete_user:
                sql: "DELETE FROM users WHERE id = :id"
                parameters: [id]

    scenario:
        database:
            atomic: true
            rules: { return_entity: false }
            return_entity: []
            statements:
                drop_database:
                    sql: "DROP DATABASE IF EXISTS rebl"
                    sql_type: database
                create_database:
                    sql: "CREATE DATABASE rebl"
                    sql_type: database
                use_database:
                    sql: "USE rebl"
                    sql_type: database
                drop_users:
                    sql: "DROP TABLE IF EXISTS users"
                    sql_type: database
                drop_account:
                    sql: "DROP TABLE IF EXISTS account"
                    sql_type: database
                drop_roles:
                    sql: "DROP TABLE IF EXISTS user_roles"
                    sql_type: database
                create_user_table:
                    sql: "CREATE TABLE users (id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, username VARCHAR(256) NOT NULL, password VARCHAR(256) NOT NULL, account_id INT(6))"
                    sql_type: database
                create_account:
                    sql: "CREATE TABLE account (id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, type VARCHAR(256) NOT NULL)"
                    sql_type: database
                create_role:
                    sql: "CREATE TABLE user_roles (id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, role VARCHAR(256) NOT NULL, user_id INT(6) NOT NULL)"
                    sql_type: database
        create_user:
            atomic: true
            return_entity: ['select_account.type as account_type']
            statements:
                create_user:
                    sql_type: insert
                    sql: "INSERT INTO users (username, password, account_id) VALUES (:username, :password, :account_id)"
                    parameters: [username, password]
                    use:
                        statement_name: select_account
                        values: { select_account.id : account_id }
                select_account:
                    sql_type: select
                    sql: "SELECT * FROM account WHERE type = :type"
                    parameters: [type]
                create_role:
                    sql_type: insert
                    sql: "INSERT INTO user_roles (role, user_id) VALUES (:role, :user_id)"
                    parameters: [role]
                    foreign_key:
                        statement_name: create_user
                        bind_to: user_id

    callable:
        complete_user:
            type: object
            name: SecureBundle\BlueDotCallable\CompleteUserCallable
