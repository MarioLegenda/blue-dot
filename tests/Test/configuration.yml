configuration:
    connection:
        host: localhost
        database_name: world
        user: 'root'
        password: ''
    simple:
        select:
            single_city:
                sql: "SELECT * FROM city WHERE Name = :name AND CountryCode = :country_code"
                parameters: [name, country_code]
            entire_world:
                sql: "SELECT * FROM city"
        insert:
            insert_user:
                sql: "INSERT INTO user (name, lastname, occupation) VALUES (:name, :lastname, :occupation)"
                parameters: [name, lastname, occupation]
            single_village:
                sql: "INSERT INTO village (name, country) VALUES (:name, :country)"
                parameters: [name, country]
        update:
            single_village:
                sql: "UPDATE village SET name = :update_name WHERE id = :id"
                parameters: [update_name, id]

        delete:
            single_village:
                sql: "DELETE FROM village WHERE id = :id"
                parameters: [id]
    scenario:
        # scenario rules:
            # - a scenario has to have at least one select statement
            # - a scenario has to return the exact result specified in the return_result config value
            # - a 'use' option can be used with all the statements. If insert, update or delete then 'use' statement has to be a select statement or last_insert_id from an insert
            # - a 'foreign_key' option can be use with all the statements but the foreign statement has to be an insert sql statement
        clear_database:
            atomic: true
            return_entity: []
            # - if 'minimal_select_statement' is true, then at least one select statement has to be present in this scenario
            # - if 'return_entity' is true, then 'return_entity' config value cannot be an empty array
            rules: {minimal_select_statement: false, return_entity: false}
            statements:
                truncate_user:
                    sql_type: table
                    sql: "TRUNCATE TABLE user"
                truncate_address:
                    sql_type: table
                    sql: "TRUNCATE TABLE address"
                truncate_village:
                    sql_type: table
                    sql: "TRUNCATE TABLE village"
        insert_user:
            atomic: true
            return_entity: [select_user.id, "select_user.name as user_name", "select_user.lastname  as user_lastname", select_address]
            statements:
                insert_user:
                    sql_type: insert
                    sql: "INSERT INTO user (name, lastname, occupation) VALUES (:name, :lastname, :occupation)"
                    use:
                        statement_name: select_user
                        values: {select_user.name : name, select_user.lastname : lastname}
                    parameters: [occupation]
                select_user:
                    sql_type: select
                    sql: "SELECT * FROM user WHERE id = :id"
                    parameters: [id]
                insert_address:
                    sql_type: insert
                    sql: "INSERT INTO address (user_id, city, address) VALUES (:user_id, :city, :address)"
                    foreign_key:
                        statement_name: insert_user
                        bind_to: user_id
                    parameters: [city, address]
                select_address:
                    sql_type: select
                    sql: "SELECT * FROM address WHERE user_id = :user_id"
                    foreign_key:
                        statement_name: insert_user
                        bind_to: user_id

    callable:
        validate_user:
            type: object
            name: Test\CallableService